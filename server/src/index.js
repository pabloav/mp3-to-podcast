'use strict';

const APP_URL = 'http://www.schreifels.org/mp3-to-podcast';

function escapeXml(xml) {
  return xml.replace(/"/g, '&quot;')
            .replace(/'/g, '&apos;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/&/g, '&amp;');
}

function buildSuccessResponse(title, dateString, mp3Url, appUrl) {
  title = escapeXml(title);
  dateString = escapeXml(dateString);
  mp3Url = escapeXml(mp3Url);
  appUrl = escapeXml(appUrl);

  return `<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>MP3 to Podcast: ${title}</title>
    <description>Generated by ${appUrl}</description>
    <link>${appUrl}</link>
    <pubDate>${dateString}</pubDate>
    <item>
      <guid>${mp3Url}</guid>
      <title>${title}</title>
      <description>Generated by MP3 to Podcast from ${mp3Url}</description>
      <enclosure url="${mp3Url}" type="audio/mpeg" />
      <pubDate>${dateString}</pubDate>
    </item>
  </channel>
</rss>`;
}

function buildErrorResponse(missingParam) {
  missingParam = escapeXml(missingParam);

  return `<?xml version="1.0" encoding="utf-8"?>
<error>
  <code>BadRequest</code>
  <message>Missing required parameter "${missingParam}"</message>
</error>`;
}

exports.handler = (event, context, callback) => {
  const mp3Url = event.mp3Url;
  let response;

  if (!mp3Url) {
    response = buildErrorResponse('mp3Url');
  } else {
    const mp3 = mp3Url.split('/').pop();
    const title = event.title || mp3;
    const dateString = new Date().toUTCString();

    response = buildSuccessResponse(title, dateString, mp3Url, APP_URL);
  }

  callback(null, response);
};
